import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.lang.reflect.Method;

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
@interface Author { String name();}

public class AnnotationExample {
    @Author(name = "John Doe")
    public void myMethod() {
    }

    public static void main(String[] args) {

        AnnotationExample annotationExample = new AnnotationExample();
        annotationExample.myMethod();

        try {
            Method myMethod = annotationExample.getClass().getMethod("myMethod");
            Author author = myMethod.getAnnotation(Author.class);
            System.out.println("The author of the method is: " + author.name());
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        }
    }
}

/*
Annotations in Java are a form of syntactic metadata that can be added to Java source code. Classes, methods, variables, parameters and Java packages may be annotated. Like Javadoc tags, Java annotations can be read from source files.

Annotations are declared using the @ symbol followed by the annotation name. The annotation name can be followed by a list of elements, which are enclosed in parentheses. Each element has a name and a value.

Here is an example of a simple annotation:


@Author(name = "John Doe")
public class MyClass {
    // Lines of Code
}

This annotation specifies that the author of the MyClass class is John Doe.

Annotations can be used for a variety of purposes, including:

Providing documentation
Describing the purpose of a program element
Enforcing coding standards
Generating code
Executing code at runtime

Here are some examples of how annotations can be used:
To provide documentation, you can use the @Documented annotation. This annotation tells the Javadoc tool to generate documentation for the annotated program element.
To describe the purpose of a program element, you can use the @Target annotation. This annotation specifies the types of program elements that can be annotated with the annotation. For example, the @Target annotation can be used to specify that an annotation can be applied to classes, methods, or fields.
To enforce coding standards, you can use the @NonNull annotation. This annotation tells the compiler to check that the value of the annotated variable is not null.
To generate code, you can use the @Generated annotation. This annotation tells the compiler that the annotated program element was generated by a tool.
To execute code at runtime, you can use the @PostConstruct annotation. This annotation tells the container to execute the annotated method after the object has been created.
Annotations are a powerful tool that can be used to add additional information to Java source code. They can be used for a variety of purposes, including providing documentation, describing the purpose of a program element, enforcing coding standards, generating code, and executing code at runtime.

Sources
en.wikipedia.org/wiki/Java_annotation
 */